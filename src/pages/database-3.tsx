/* eslint-disable @next/next/no-img-element */
import { type NextPage } from "next";
import Head from "next/head";
import InfiniteScroll from "react-infinite-scroll-component";
import moment from "moment";
import { api } from "y/utils/api";
import { type ChangeEvent, useState, type FormEvent, useRef } from "react";
import { faker } from "@faker-js/faker";
import { inferRouterOutputs } from "@trpc/server";
import { AppRouter } from "y/server/api/root";
import { AnimatePresence, motion } from "framer-motion";

const Database2: NextPage = () => {
  const utils = api.useContext();
  const [content, setContent] = useState("");
  const ref = useRef<HTMLDivElement>(null);

  // isFetching,
  // isFetchingNextPage,
  const { data, isLoading, fetchNextPage, hasNextPage } =
    api.posts.getAll.useInfiniteQuery(
      { limit: 20 },
      {
        getNextPageParam: (lastPage) => lastPage.nextCursor,
      }
    );

  const { mutate: addPost } = api.posts.add.useMutation({
    onMutate: async (newPost) => {
      await utils.posts.getAll.cancel();
      utils.posts.getAll.setInfiniteData({ limit: 20 }, (data) => {
        if (!data)
          return {
            pages: [],
            pageParams: [],
          };

        return {
          ...data,
          pages: data.pages.map((page, index) => ({
            ...page,
            posts: index === 0 ? [newPost, ...page.posts] : [...page.posts],
          })),
        };
      });

      setTimeout(() => {
        if (ref.current) {
          ref.current.scrollTo({
            top: 0,
            behavior: "smooth",
          });
        }
      }, 50);
    },
    onSuccess: async () => {
      // await utils.posts.getAll.refetch();
    },
  });

  const handleInputChange = (
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    switch (name) {
      case "content":
        setContent(value);
        break;
      default:
        break;
    }
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (ref.current) {
      ref.current.scrollTo({
        top: -0.5,
        behavior: "smooth",
      });
    }
    addPost({
      author: "Nicolas Chaima",
      title: "Nuevo post",
      content,
      authorImage: faker.image.avatar(),
      id: faker.datatype.uuid(),
      createdAt: new Date(),
    });
    setContent("");
    return true;
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-7">
        <div id="scroll2" className="mt-4 h-[80vh] overflow-y-auto pr-2">
          {isLoading || !data ? (
            <p>Loading...</p>
          ) : (
            <div className="flex h-[75vh] flex-col gap-4">
              <div
                ref={ref}
                id="scroll"
                className="flex h-full flex-1 flex-col-reverse overflow-y-auto"
              >
                <InfiniteScroll
                  dataLength={data.pages.reduce((acc, page) => {
                    return acc + page.posts.length;
                  }, 0)}
                  next={fetchNextPage}
                  hasMore={hasNextPage as boolean}
                  style={{ display: "flex", flexDirection: "column-reverse" }}
                  inverse={true} // most important
                  loader={<h4>Loading...</h4>}
                  scrollableTarget={"scroll"}
                  endMessage={
                    <p style={{ textAlign: "center" }}>
                      <b>Yay! You have seen it all</b>
                    </p>
                  }
                >
                  {data.pages.map((page) =>
                    page.posts.map((post) => (
                      <PostCard key={post.id} post={post}></PostCard>
                    ))
                  )}
                </InfiniteScroll>
              </div>
              <form className="flex items-center gap-3" onSubmit={handleSubmit}>
                <input
                  type="text"
                  className="flex-1 rounded-lg border px-4 py-2"
                  placeholder="Escribe aquÃ­"
                  name="content"
                  value={content}
                  onChange={handleInputChange}
                  required
                />
                <button
                  type="submit"
                  className="rounded bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 px-6 py-1.5 font-semibold text-white transition-all duration-150 ease-out hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 hover:ease-in"
                >
                  Enviar
                </button>
              </form>
            </div>
          )}
        </div>
      </main>
    </>
  );
};

export default Database2;

type RouterOutput = inferRouterOutputs<AppRouter>;
type PostCreateOutput = RouterOutput["posts"]["getAll"];
type Post = PostCreateOutput["posts"][number];

type PostCardProps = {
  post: Post;
};
function PostCard({ post }: PostCardProps) {
  return (
    <div className="my-2 border-b p-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <img
            src={post.authorImage}
            alt=""
            className="inline-block h-10 w-10 rounded-full ring-2 ring-white"
          />
          <p className="text-xl">
            {post.author} - {post.id}
          </p>
        </div>
        <p className="text-sm text-gray-500">
          {moment(post.createdAt).format("DD-MM-YYYY hh:mm")}
        </p>
      </div>
      <p className="mt-3 text-lg font-medium">{post.title}</p>
      <p>{post.content}</p>
    </div>
  );
}
